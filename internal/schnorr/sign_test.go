package schnorr

import (
	"bytes"
	"crypto/elliptic"
	"crypto/sha256"
	"math/big"
	"testing"
)

func TestDeterministicNonce(t *testing.T) {
	// https://datatracker.ietf.org/doc/html/rfc6979#appendix-A.2.5
	scalar := []byte{
		0xc9, 0xaf, 0xa9, 0xd8, 0x45, 0xba, 0x75, 0x16, 0x6b, 0x5c, 0x21, 0x57,
		0x67, 0xb1, 0xd6, 0x93, 0x4e, 0x50, 0xc3, 0xdb, 0x36, 0xe8, 0x9b, 0x12,
		0x7b, 0x8a, 0x62, 0x2b, 0x12, 0x0f, 0x67, 0x21,
	}
	expectedNonce := []byte{
		0xa6, 0xe3, 0xc5, 0x7d, 0xd0, 0x1a, 0xbe, 0x90, 0x08, 0x65, 0x38, 0x39,
		0x83, 0x55, 0xdd, 0x4c, 0x3b, 0x17, 0xaa, 0x87, 0x33, 0x82, 0xb0, 0xf2,
		0x4d, 0x61, 0x29, 0x49, 0x3d, 0x8a, 0xad, 0x60,
	}
	messageHash := sha256.Sum256([]byte("sample"))
	nonce := DeterministicNonce(scalar, messageHash)
	if !bytes.Equal(nonce, expectedNonce) {
		t.Errorf("Unexpected nonce: %02x", nonce)
	}
}

func TestRejectionSampling(t *testing.T) {
	skey := testKey()
	// The message below, when used with skey, results in the first candidate generated by
	// DeterministicNonce being invalid (greater than the subgroup order). Roughly one in 2^32
	// values have this property. This one was found by bruteforce.
	digest := [32]byte{
		0x00, 0x80, 0xc3, 0x68, 0x64, 0xc5, 0xf2, 0xf4, 0x60, 0xe3, 0x76, 0x79,
		0x83, 0xc6, 0x56, 0x77, 0xb6, 0x5c, 0xef, 0x90, 0x1b, 0xce, 0xdc, 0xb2,
		0x23, 0xf9, 0xb3, 0x65, 0xc6, 0x8f, 0x52, 0xf6,
	}
	expectedNonce := []byte{
		0x26, 0x4f, 0xc6, 0x59, 0x2f, 0xbe, 0xa2, 0x4f, 0xd0, 0x95, 0x4e, 0x0b,
		0x86, 0xb8, 0x86, 0xe8, 0x74, 0x31, 0x61, 0x75, 0x8d, 0xda, 0xd2, 0xf7,
		0xe9, 0xfe, 0xd7, 0x5a, 0x00, 0x19, 0xe0, 0x05,
	}
	nonceBytes := DeterministicNonce(skey.Bytes(), digest)
	nonce := big.NewInt(0).SetBytes(nonceBytes)
	if nonce.Cmp(elliptic.P256().Params().N) >= 0 {
		t.Error("Nonce is larger than subgroup order")
	}
	if !bytes.Equal(nonceBytes, expectedNonce) {
		t.Errorf("Resampled value is not correct. Got %02x.", nonceBytes)
	}
}

func TestSign(t *testing.T) {
	skey := testKey()
	_, message, goodSignature := goodSig()
	signature, err := Sign(skey, message)
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(signature, goodSignature) {
		t.Logf("Expected: %02x", goodSignature)
		t.Logf("Computed: %02x", signature)
		t.Error("did not compute expected signature")
	}
}
